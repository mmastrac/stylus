on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install just
        uses: baptiste0928/cargo-install@v3
        with:
          crate: just
      - name: Install cross
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cross
      - name: Install deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: "2.4.1"
      - name: Bundle UI source
        run: just bundle
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          cross build --release --target arm-unknown-linux-musleabi
          cross build --release --target arm-unknown-linux-musleabihf
          cross build --release --target aarch64-unknown-linux-musl
          cross build --release --target x86_64-unknown-linux-musl
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset-musleabi
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./target/arm-unknown-linux-musleabi/release/stylus
          asset_name: stylus_linux_arm
          asset_content_type: application/binary
      - name: Upload Release Asset
        id: upload-release-asset-musleabihf
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./target/arm-unknown-linux-musleabihf/release/stylus
          asset_name: stylus_linux_armhf
          asset_content_type: application/binary
      - name: Upload Release Asset
        id: upload-release-asset-aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./target/aarch64-unknown-linux-musl/release/stylus
          asset_name: stylus_linux_arm64
          asset_content_type: application/binary
      - name: Upload Release Asset
        id: upload-release-asset-x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./target/x86_64-unknown-linux-musl/release/stylus
          asset_name: stylus_linux_amd64
          asset_content_type: application/binary
